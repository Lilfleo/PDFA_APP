package com.pdfa.pdfa_app.user_interface.filter

import androidx.compose.runtime.Stable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import com.pdfa.pdfa_app.data.model.FoodDetailWithFood
import java.util.Date

@Stable
class FridgeFilterState {
    // üîç √âtats des filtres
    var searchQuery by mutableStateOf("")
        private set

    var selectedCategoryFood by mutableStateOf<String?>(null)
        private set

    var sortByQuantityAsc by mutableStateOf(false)
    var sortByQuantityDesc by mutableStateOf(false)
    var sortByExpirationDate by mutableStateOf(false)

    var expanded by mutableStateOf(false)
        private set

    // üìù Actions pour modifier les √©tats (noms diff√©rents pour √©viter conflits)
    fun updateSearchQuery(query: String) {
        searchQuery = query
    }

    fun updateSelectedCategory(category: String?) {
        selectedCategoryFood = category
    }

    fun toggleFilterExpansion() {
        expanded = !expanded
    }

    fun enableQuantityAscSort(enabled: Boolean) {  // ‚úÖ Nom chang√©
        sortByQuantityAsc = enabled
        if (enabled) {
            sortByQuantityDesc = false
            sortByExpirationDate = false
        }
    }

    fun enableQuantityDescSort(enabled: Boolean) {  // ‚úÖ Nom chang√©
        sortByQuantityDesc = enabled
        if (enabled) {
            sortByQuantityAsc = false
            sortByExpirationDate = false
        }
    }

    fun enableExpirationDateSort(enabled: Boolean) {  // ‚úÖ Nom chang√©
        sortByExpirationDate = enabled
        if (enabled) {
            sortByQuantityAsc = false
            sortByQuantityDesc = false
        }
    }

    fun clearAllFilters() {
        searchQuery = ""
        selectedCategoryFood = null
        sortByQuantityAsc = false
        sortByQuantityDesc = false
        sortByExpirationDate = false
    }

    // üéØ Logique de filtrage principale
    fun applyFilters(foodDetail: List<FoodDetailWithFood>): List<FoodDetailWithFood> {
        var result = foodDetail

        // 1Ô∏è‚É£ Recherche par nom d'aliment
        if (searchQuery.isNotBlank()) {
            result = result.filter {
                it.food.name.contains(searchQuery, ignoreCase = true)
            }
        }

        // 2Ô∏è‚É£ Filtre par cat√©gorie
        if (selectedCategoryFood != null) {
            result = result.filter {
                it.food.category == selectedCategoryFood
            }
        }

        // 3Ô∏è‚É£ Tri par quantit√© croissante
        if (sortByQuantityAsc) {
            result = result.sortedBy { it.foodDetail.quantity }
        }

        // 4Ô∏è‚É£ Tri par quantit√© d√©croissante
        if (sortByQuantityDesc) {
            result = result.sortedByDescending { it.foodDetail.quantity }
        }

        // 5Ô∏è‚É£ Tri par date de p√©remption
        if (sortByExpirationDate) {
            result = result.sortedBy {
                it.foodDetail.expirationTime ?: Date(Long.MAX_VALUE)
            }
        }

        return result
    }

    // üìä R√©cup√®re les cat√©gories uniques
    fun getUniqueCategories(foodDetail: List<FoodDetailWithFood>): List<String> {
        return foodDetail.map { it.food.category }.distinct().sorted()
    }

    // ‚úÖ V√©rifie si des filtres sont actifs
    fun hasActiveFilters(): Boolean {
        return searchQuery.isNotBlank() ||
                selectedCategoryFood != null ||
                sortByQuantityAsc ||
                sortByQuantityDesc ||
                sortByExpirationDate
    }
}
